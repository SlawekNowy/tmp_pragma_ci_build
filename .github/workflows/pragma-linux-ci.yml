name: Build Linux
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: environment-lin-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-22.04
            name: "Ubuntu GCC-11"
            artifact: "ubuntu_gcc.7z"
            build_type: "RelWithDebInfo"
            cc: "clang-14"
            cxx: "clang++-14"
            archiver: "7z a"
            generators: "Unix Makefiles"
            build_dir: 'build'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Prerequisites
        shell: bash
        run: |
          sudo apt install build-essential
          sudo add-apt-repository ppa:savoury1/llvm-defaults-14
          sudo apt update
          sudo apt install clang-14
          sudo apt install libstdc++-12-dev
          sudo apt install libstdc++6

          # GLFW
          sudo apt install xorg-dev

          # OIDN
          sudo apt install git-lfs

          # Cycles
          sudo apt-get install subversion

          # Curl
          sudo apt-get install libssl-dev
          sudo apt install libssh2-1

          # OIIO
          sudo apt-get install python3-distutils

          # TODO: Install CMake
          # TODO: Install Vulkan SDK

      - name: Download Pragma
        shell: bash
        run: |
          git clone https://github.com/Silverlan/pragma.git --recurse-submodules
          cp linux/pragma_build_linux.sh pragma/build_scripts/build_linux.sh

      - name: Preprocessing
        shell: bash
        run: |
          cp CMakeLists.txt pragma/

      - name: Setup Pragma
        shell: bash
        run: |
          cd pragma
          bash ./build_scripts/build_linux.sh

      - name: Build Pragma
        shell: bash
        run: |
          cd pragma/build
          cmake --build "." --config RelWithDebInfo --target pragma-install-full
          
      - name: Create Release Files
        shell: bash
        run: |
          mkdir release
          rsync pragma/build/install/ release/
          



      - name: Tar
        shell: bash
        working-directory: './release'
        id: generate-archive
        run: |
          archiveName=binaries_linux64.tar.gz
          echo "Running command"
          echo "tar -czvf $archiveName *"
          echo "in $PWD"
          tar -czvf $archiveName *
          echo "DONE"

      - name: Generate Release Archive
        shell: bash
        working-directory: './release'
        id: generate-archive2
        run: |
          mv $archiveName ../$archiveName
          echo "::set-output name=archive-name::$archiveName"
          
      - name: Update Nightly Tag
        uses: rickstaa/action-create-tag@v1.3.9
        continue-on-error: true
        if: runner.os == 'Linux' && ${{ '1' == '1' }}
        with:
          tag: "latest"
          force_push_tag: true

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{inputs.working-directory}}/../${{ steps.generate-archive.outputs.archive-name }}"
          body: "Automatically generated binaries."
          commit: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: latest
          replacesArtifacts: true
          allowUpdates: true







      #- name: Release Binaries
      #  uses: Silverlan/common_actions/release_nightly_binaries@main
      #  with:
      #    token: ${{ secrets.GITHUB_TOKEN }}
      #    commit: ${{ github.ref_name }}
          
      - name: Handle Error
        uses: Silverlan/common_actions/action_handle_error@main
        if: failure()
        
